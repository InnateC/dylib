name: CI

on:
  push:
    paths:
      - .github/workflows/CI.yml
      - CMakeLists.txt
      - include/*
      - tests/*

  pull_request:
    paths:
      - .github/workflows/CI.yml
      - CMakeLists.txt
      - include/*
      - tests/*

defaults:
  run:
    shell: bash

jobs:
  unit_tests:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux-qt6
            os: ubuntu-22.04
            test: 0
            preset: linux-clang-test
          - platform: linux
            os: ubuntu-22.04
            test: 1
            preset: linux-gcc-test
          - platform: linux
            os: ubuntu-20.04
            test: 0
            preset: linux-gcc-debug
          - platform: mac-intel
            os: macos-12
            test: 0
            pack: 1
            pack_type: Release
            extension: dmg
            preset: macos-conan-ninja-release
            conan_profile: macos-intel
            conan_options: --options with_apple_system_libs=True
            artifact_platform: intel
          - platform: mac-arm
            os: macos-12
            test: 0
            pack: 1
            pack_type: Release
            extension: dmg
            preset: macos-arm-conan-ninja-release
            conan_profile: macos-arm
            conan_options: --options with_apple_system_libs=True
            artifact_platform: arm
          - platform: ios
            os: macos-12
            test: 0
            pack: 1
            pack_type: Release
            extension: ipa
            preset: ios-release-conan-ccache
            conan_profile: ios-arm64
            conan_options: --options with_apple_system_libs=True
          - platform: msvc
            os: windows-latest
            test: 0
            pack: 1
            pack_type: RelWithDebInfo
            extension: exe
            preset: windows-msvc-release-ccache
          - platform: mingw
            os: ubuntu-22.04
            test: 0
            pack: 1
            pack_type: Release
            extension: exe
            cpack_args: -D CPACK_NSIS_EXECUTABLE=`which makensis`
            cmake_args: -G Ninja
            preset: windows-mingw-conan-linux
            conan_profile: mingw64-linux.jinja
          - platform: mingw-32
            os: ubuntu-22.04
            test: 0
            pack: 1
            pack_type: Release
            extension: exe
            cpack_args: -D CPACK_NSIS_EXECUTABLE=`which makensis`
            cmake_args: -G Ninja
            preset: windows-mingw-conan-linux
            conan_profile: mingw32-linux.jinja
          - platform: android-32
            os: ubuntu-22.04
            extension: apk
            preset: android-conan-ninja-release
            conan_profile: android-32
            conan_options: --conf tools.android:ndk_path=$ANDROID_NDK_ROOT
            artifact_platform: armeabi-v7a
          - platform: android-64
            os: ubuntu-22.04
            extension: apk
            preset: android-conan-ninja-release
            conan_profile: android-64
            conan_options: --conf tools.android:ndk_path=$ANDROID_NDK_ROOT
            artifact_platform: arm64-v8a

    name: ${{ matrix.os }} (C++${{ matrix.cxx-std }} - ${{ matrix.generator }})
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Generate project files
        run: cmake . -B build -G "${{ matrix.generator }}" -DCMAKE_CXX_STANDARD=${{ matrix.cxx-std }} -DDYLIB_BUILD_TESTS=ON -DDYLIB_WARNING_AS_ERRORS=ON

      - name: Build dynamic library and unit tests
        run: cmake --build build

      - name: Run unit tests
        working-directory: build
        run: ctest

      - name: Generate code coverage
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.cxx-std == 20 }}
        run: gcov -abcfu build/CMakeFiles/unit_tests.dir/tests/tests.cpp.gcda

      - name: Send coverage to codecov.io
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.cxx-std == 20 }}
        uses: codecov/codecov-action@v3
        with:
          files: dylib.hpp.gcov

  memory_check:
    name: memory check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Update packages
        run: sudo apt update

      - name: Install valgrind
        run: sudo apt install -y valgrind

      - name: Generate tests build file
        run: cmake . -B build -DCMAKE_CXX_STANDARD=20 -DDYLIB_BUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Debug

      - name: Build unit tests
        run: cmake --build build

      - name: Run unit tests with valgrind
        working-directory: build
        run: valgrind --leak-check=full --show-leak-kinds=all --error-exitcode=1 ./unit_tests

  linter:
    name: linter
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install cpplint
        run: pip install cpplint

      - name: Run cpplint
        run: cpplint --linelength=140 --filter=-whitespace/indent,-whitespace/parens include/dylib.hpp
